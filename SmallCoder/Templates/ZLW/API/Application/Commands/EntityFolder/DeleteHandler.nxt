using Architecture.Common.NumericalOrderCreator;
using Architecture.Common.Z.NumberCreator;
using Architecture.Seedwork.Core;
using Architecture.Seedwork.Infrastructure;
using Architecture.Seedwork.Security;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Z.Basic.Synchronization.DomainEvents;
using Z.Basic.Synchronization.Infrastructure;
using {{ _SpaceName }}.Infrastructure;
using {{ _SpaceName }}.Infrastructure.Repository.Interfaces;
using Z.Production.Common.DomainEvents;
using Z.Production.Common.DomainEvents.BatchAge;
using Z.Production.Common.Infrastructure.Interfaces;
using Zlw.Common.Enum;

namespace {{ _SpaceName }}.API.Application.Commands
{
    public class {{ _EntityName }}DeleteHandler : IRequestHandler<{{ _EntityName }}DeleteCommand, Result>
    {
        readonly IIdentityService _identityService;
        readonly ILogger<{{ _EntityName }}DeleteHandler> _logger;
        readonly IMsTransferHourseRepository _transferHourseRepository;
        readonly QlwBusinessContext _qlwBusinessContext;

        public {{ _EntityName }}DeleteHandler(
              IIdentityService _identityService
            , ILogger<{{ _EntityName }}DeleteHandler> _logger
            , IMsTransferHourseRepository _transferHourseRepository
            , QlwBusinessContext _qlwBusinessContext
            )
        {
            this._logger = _logger;
            this._identityService = _identityService;
            this._transferHourseRepository = _transferHourseRepository;
            this._qlwBusinessContext = _qlwBusinessContext;
        }

        public async Task<Result> Handle({{ _EntityName }}DeleteCommand request, CancellationToken cancellationToken)
        {
            var result = new Result();
            try
            {
                var numericalOrder = request.NumericalOrder;
                



                var isSuccess = await _transferHourseRepository.UnitOfWork.AsEFContext().UseCombinedTranscantion(_qlwBusinessContext).SaveEntitiesAsync(cancellationToken);
                if (isSuccess)
                {
                    result.code = ErrorCode.Success.GetIntValue();
                    result.data = new { numericalOrder = numericalOrder };
                }
            }
            catch (ErrorCodeExecption ex)
            {
                ex.MapToResult(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"{{ _Description }}删除异常，入参：{ request?.ToJson() }");
                result.code = ErrorCode.ServerBusy.GetIntValue();
                result.msg = null;
                result.data = null;
            }
            return result;
        }
    }
}
