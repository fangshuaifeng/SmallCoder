using Architecture.Common.NumericalOrderCreator;
using Architecture.Common.Z.NumberCreator;
using Architecture.Seedwork.Core;
using Architecture.Seedwork.Infrastructure;
using Architecture.Seedwork.Security;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Z.Basic.Synchronization.DomainEvents;
using Z.Basic.Synchronization.Infrastructure;
using {{ _SpaceName }}.Domain.Events;
using {{ _SpaceName }}.Infrastructure;
using {{ _SpaceName }}.Infrastructure.Repository.Interfaces;
using Z.Production.Common.DomainEvents;
using Z.Production.Common.DomainEvents.BatchAge;
using Z.Production.Common.Infrastructure.Interfaces;
using Zlw.Common.Enum;

namespace {{ _SpaceName }}.API.Application.Commands
{
    public class {{ _EntityName }}UpdateHandler : IRequestHandler<{{ _EntityName }}UpdateCommand, Result>
    {
        readonly IIdentityService _identityService;
        readonly NumericalOrderCreator _numericalOrderCreator;
        readonly NumberCreator<BreedingContext> _numberCreator;
        readonly ILogger<{{ _EntityName }}UpdateHandler> _logger;
        readonly IMsTransferHourseRepository _transferHourseRepository;
        readonly QlwBusinessContext _qlwBusinessContext;

        public {{ _EntityName }}UpdateHandler(
             IIdentityService _identityService
            , NumericalOrderCreator _numericalOrderCreator
            , NumberCreator<BreedingContext> _numberCreator
            , ILogger<{{ _EntityName }}UpdateHandler> _logger
            , IMsTransferHourseRepository _transferHourseRepository
            , QlwBusinessContext _qlwBusinessContext
            )
        {
            this._logger = _logger;
            this._identityService = _identityService;
            this._numberCreator = _numberCreator;
            this._numericalOrderCreator = _numericalOrderCreator;
            this._transferHourseRepository = _transferHourseRepository;
            this._qlwBusinessContext = _qlwBusinessContext;
        }

        public async Task<Result> Handle({{ _EntityName }}UpdateCommand request, CancellationToken cancellationToken)
        {
            var result = new Result();
            try
            {
                var numericalOrder = request.NumericalOrder;
                var numericalOrders = await _numericalOrderCreator.CreateAsync(request.Details.Where(w => w.Target == TargetType.Create).Count() * 2 + 1);
                

                var index = 1;
                foreach (var item in request.Details)
                {
                    switch (item.Target)
                    {
                        case TargetType.Create:
                            {
                                var numericalOrderDetail = numericalOrders.Take();
                                

                            }
                            break;
                        case TargetType.Update:
                            {
                                
                            }
                            break;
                        case TargetType.Delete:
                            {
                                
                            }
                            break;
                        case TargetType.Unchang:
                            {
                                
                            }
                            break;
                    }

                    index++;
                }


                var isSuccess = await _transferHourseRepository.UnitOfWork.AsEFContext().UseCombinedTranscantion(_qlwBusinessContext).SaveEntitiesAsync(cancellationToken);
                if (isSuccess)
                {
                    result.code = ErrorCode.Success.GetIntValue();
                    result.data = new { numericalOrder = numericalOrder };
                }
            }
            catch (ErrorCodeExecption ex)
            {
                ex.MapToResult(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"{{ _Description }}修改异常，入参：{ request?.ToJson() }");
                result.code = ErrorCode.ServerBusy.GetIntValue();
                result.msg = null;
                result.data = null;
            }
            return result;
        }
    }
}
