using Architecture.Seedwork.Core;
using Architecture.Seedwork.Security;
using Microsoft.Extensions.Logging;
using MediatR;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Zlw.API.Common;

namespace {{ _SpaceName }}.API.Application.Commands
{
    public class {{ _EntityName }}ImportHandler : IRequestHandler<{{ _EntityName }}ImportCommand, Result>
    {
        readonly IIdentityService _identityService;
        readonly ILogger<{{ _EntityName }}ImportHandler> _logger;
        readonly IRequestHandler<{{ _EntityName }}CreateCommand, Result> _saveHandler;
        readonly QlwPersonProvider _personProvider;

        public {{ _EntityName }}ImportHandler(
             IIdentityService _identityService
            , ILogger<{{ _EntityName }}ImportHandler> _logger
            , IRequestHandler<{{ _EntityName }}CreateCommand, Result> _saveHandler
            , QlwPersonProvider _personProvider
            )
        {
            this._logger = _logger;
            this._identityService = _identityService;
            this._saveHandler = _saveHandler;
            this._personProvider = _personProvider;
        }

        public async Task<Result> Handle({{ _EntityName }}ImportCommand request, CancellationToken cancellationToken)
        {
            var result = new Result();
            try
            {
                var firstLine = request.ExcelLines.First();
                if (firstLine.PersonID.IsNotNullOrEmpty() && firstLine.PersonID != "0")
                {
                    firstLine.PersonID = (await _personProvider.GetPerson(firstLine.PersonID)).UserID;
                }

                var createCmd = new {{ _EntityName }}CreateCommand()
                {
                    DataDate = firstLine.DataDate.ToDateTime().Value,
                    PersonID = firstLine.PersonID,
                    Remarks = firstLine.Remarks
                };
                createCmd.Details = request.ExcelLines.Select(s => new {{ _EntityName }}DetailDto
                {
                    
                }).ToList();

                return await _saveHandler.Handle(createCmd, cancellationToken);
            }
            catch (ErrorCodeExecption ex)
            {
                ex.MapToResult(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"{{ _Description }}导入异常，入参：{ request?.ToJson() }");
                result.code = ErrorCode.ServerBusy.GetIntValue();
                result.msg = null;
                result.data = null;
            }
            return result;
        }
    }
}
